openapi: 3.0.3
info:
  title: newproj API
  version: 1.0.0
  description: Test description
  contact:
    email: contact@example.org
  license:
    name: Custom License
paths:
  /api/bill/:
    get:
      operationId: bill_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - bill
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBillList'
          description: ''
    post:
      operationId: bill_create
      tags:
      - bill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bill'
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: ''
  /api/bill/{id}/:
    get:
      operationId: bill_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bill.
        required: true
      tags:
      - bill
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: ''
    put:
      operationId: bill_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bill.
        required: true
      tags:
      - bill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bill'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: ''
    patch:
      operationId: bill_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bill.
        required: true
      tags:
      - bill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBill'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: ''
  /api/order/:
    get:
      operationId: order_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedordererializerList'
          description: ''
    post:
      operationId: order_create
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ordererializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ordererializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ordererializer'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ordererializer'
          description: ''
  /api/order/{id}/:
    get:
      operationId: order_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - order
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ordererializer'
          description: ''
    put:
      operationId: order_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ordererializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ordererializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ordererializer'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ordererializer'
          description: ''
    patch:
      operationId: order_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patchedordererializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patchedordererializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patchedordererializer'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ordererializer'
          description: ''
  /api/product/:
    get:
      operationId: product_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - product
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: product_create
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/product/{id}/:
    get:
      operationId: product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - product
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: product_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: product_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/user/:
    get:
      operationId: user_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: user_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{id}/:
    get:
      operationId: user_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: user_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/check_email/:
    post:
      operationId: user_check_email_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CheckEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CheckEmail'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckUserResponse'
          description: ''
  /api/user/check_username/:
    post:
      operationId: user_check_username_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CheckUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CheckUsername'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckUserResponse'
          description: ''
  /api/user/current/:
    get:
      operationId: user_current_retrieve
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/login/:
    post:
      operationId: user_login_create
      description: User login view
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
          description: ''
  /api/user/logout/:
    post:
      operationId: user_logout_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Empty'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Empty'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/permissions/:
    get:
      operationId: user_permissions_retrieve
      tags:
      - user
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
          description: ''
  /api/user/reset_confirm_password/:
    post:
      operationId: user_reset_confirm_password_create
      description: Reset confirm password
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/reset_password/:
    post:
      operationId: user_reset_password_create
      description: Reset password
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/zone/:
    get:
      operationId: zone_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - zone
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedZoneList'
          description: ''
    post:
      operationId: zone_create
      tags:
      - zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Zone'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: ''
  /api/zone/{id}/:
    get:
      operationId: zone_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this zone.
        required: true
      tags:
      - zone
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: ''
    put:
      operationId: zone_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this zone.
        required: true
      tags:
      - zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Zone'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: ''
    patch:
      operationId: zone_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this zone.
        required: true
      tags:
      - zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedZone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedZone'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedZone'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: ''
components:
  schemas:
    Bill:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        closed_at:
          type: string
          format: date-time
          nullable: true
        is_open:
          type: boolean
        table:
          type: integer
          nullable: true
      required:
      - created_at
      - id
    CheckEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    CheckUserResponse:
      type: object
      properties:
        exists:
          type: boolean
      required:
      - exists
    CheckUsername:
      type: object
      properties:
        username:
          type: string
      required:
      - username
    Email:
      type: object
      description: Validate the contact email
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Empty:
      type: object
      properties:
        empty_data:
          type: string
          readOnly: true
      required:
      - empty_data
    PaginatedBillList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Bill'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedZoneList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Zone'
    PaginatedordererializerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ordererializer'
    PatchedBill:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        closed_at:
          type: string
          format: date-time
          nullable: true
        is_open:
          type: boolean
        table:
          type: integer
          nullable: true
    PatchedProduct:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        image:
          type: integer
          nullable: true
    PatchedUser:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          maxLength: 128
        username:
          type: string
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: User email
          maxLength: 254
        first_name:
          type: string
          nullable: true
          title: User first name
          maxLength: 30
        last_name:
          type: string
          nullable: true
          title: User last name
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          title: User role
        phone:
          type: string
          nullable: true
          title: User phone number
          maxLength: 16
        is_active:
          type: boolean
          nullable: true
          title: Is user active
        deactivation_datetime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          title: Datetime when user was deactivated
        login_attempts:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: User login attemps
        last_bad_login_attempt_datetime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        has_login_blocked:
          type: string
          readOnly: true
    PatchedZone:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
    Patchedordererializer:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        bill:
          type: integer
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
    Permission:
      type: object
      description: Serialize pydrfpermissions
      properties:
        url:
          type: string
        action:
          type: string
      required:
      - action
      - url
    Product:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        image:
          type: integer
          nullable: true
      required:
      - id
      - name
    ResetPassword:
      type: object
      description: Validate the contact email
      properties:
        token:
          type: string
        new_password1:
          type: string
        new_password2:
          type: string
      required:
      - new_password1
      - new_password2
      - token
    RoleEnum:
      enum:
      - superadmin
      - user
      type: string
      description: |-
        * `superadmin` - Superadministrador
        * `user` - User
    User:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          maxLength: 128
        username:
          type: string
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: User email
          maxLength: 254
        first_name:
          type: string
          nullable: true
          title: User first name
          maxLength: 30
        last_name:
          type: string
          nullable: true
          title: User last name
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          title: User role
        phone:
          type: string
          nullable: true
          title: User phone number
          maxLength: 16
        is_active:
          type: boolean
          nullable: true
          title: Is user active
        deactivation_datetime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          title: Datetime when user was deactivated
        login_attempts:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: User login attemps
        last_bad_login_attempt_datetime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        has_login_blocked:
          type: string
          readOnly: true
      required:
      - deactivation_datetime
      - email
      - has_login_blocked
      - id
      - last_bad_login_attempt_datetime
      - password
      - username
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          title: User email
          maxLength: 254
        password:
          type: string
          maxLength: 128
        token:
          type: integer
          readOnly: true
      required:
      - email
      - password
      - token
    Zone:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
      required:
      - id
      - name
    ordererializer:
      type: object
      description: |-
        A ModelSerializer that takes additional arguments for
        "fields" and "include" in order to
        control which fields are displayed, and whether to replace simple values with
        complex, nested serializations.
      properties:
        id:
          type: integer
          readOnly: true
        bill:
          type: integer
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - bill
      - id
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
